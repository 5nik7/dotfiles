#!/bin/bash

CRE=$(tput setaf 1)
CYE=$(tput setaf 3)
CGR=$(tput setaf 2)
CBL=$(tput setaf 4)
BLD=$(tput bold)
CNC=$(tput sgr0)
LOG="install.log"

source_folder=~/sources
fzfdir=~/.fzf
fzfepo=https://github.com/junegunn/fzf
neodir=~/sources/neovim
neorepo=https://github.com/neovim/neovim
dotdir=~/dotfiles
dotrepo=https://github.com/5nik7/dotfiles.git

clear
logo() {

	local text="${1:?}"
	echo -en "\n
    ██████████      ███████    ██████████ ██████████
   ░░███░░░░███   ███░░░░░███ ░███░░░░███░███░░░░░░█
    ░███   ░░███ ███     ░░███░░░    ███ ░███     ░
    ░███    ░███░███      ░███      ███  ░█████████
    ░███    ░███░███      ░███     ███   ░░░░░░░░███
    ░███    ███ ░░███     ███     ███     ███   ░███
    ██████████   ░░░███████░     ███     ░░████████
   ░░░░░░░░░░      ░░░░░░░      ░░░       ░░░░░░░░\n\n"
	printf ' %s [%s%s %s%s %s]%s\n\n' "${CRE}" "${CNC}" "${CYE}" "${text}" "${CNC}" "${CRE}" "${CNC}"
}

########## ---------- You must not run this as root ---------- ##########
logo "This will probably break everything..."

if [ "$(id -u)" = 0 ]; then
	echo "This script MUST NOT be run as root user."
	exit 1
fi

if [ ! -d "$source_folder" ]; then
	mkdir -p "$source_folder" || exit
fi
[ ! -d ~/.config ] && mkdir -p ~/.config
[ ! -d ~/.local/bin ] && mkdir -p ~/.local/bin
[ ! -d ~/.local/share/applications ] && mkdir -p ~/.local/share/applications
[ ! -d ~/.local/share/fonts ] && mkdir -p ~/.local/share/fonts

if ! command -v paru >/dev/null 2>&1; then
	read -n1 -rep "Would you like to install Paru? (y/n)" PARUINST
	if [[ $PARUINST =~ ^[Yy]$ ]]; then
		pacman -S --needed git base-devel
		cd "$source_folder" || exit
		git clone https://aur.archlinux.org/paru-bin.git
		cd paru-bin || exit
		makepkg -si --noconfirm 2>&1 | tee -a $LOG
		cd || exit
	else
		printf "%s%sParu is already installed.%s" "${BLD}" "${CGR}" "${CNC}"
		sleep 1
	fi
fi
sleep 1
clear

logo "Yay check..."
# Check if yay is installed
ISyay=/sbin/yay

if [ -f "$ISyay" ]; then
	printf "\n%sYay was located, moving on.%s\n" "$CGR" "$CNC"
else
	printf "\n%s yay was NOT located%s\n" "$CYE" "$CNC"
	read -n1 -rep "Would you like to install yay (y,n)" YAYINST
	if [[ $YAYINST =~ ^[Yy]$ ]]; then
		pacman -S --needed git base-devel
		cd "$source_folder" || exit
		git clone https://aur.archlinux.org/yay.git
		cd yay || exit
		makepkg -si --noconfirm 2>&1 | tee -a $LOG
		cd || exit
	else
		printf "%s yay is required for this script, now exiting.%s\n" "$CRE" "$CNC"
		exit
	fi
	# update system before proceed
	printf '%s System Update to avoid issue.%s\n' "${CYE}" "${CNC}"
	yay -Syu --noconfirm 2>&1 | tee -a $LOG
fi
sleep 1
clear

### Install packages ####
logo "Package Installation"

while true; do
	read -n1 -rep "Would you like to install the packages? (y,n)" yn
	case $yn in
	[Yy]*) break ;;
	[Nn]*) exit ;;
	*) printf " Error: just write 'y' or 'n'\n\n" ;;
	esac
done
clear

logo "Installing Packages..."

dependencias=(git base-devel base-devel cmake unzip ninja curl unrar jq pacman-contrib rustup nodejs npm luarocks go python-pip
	xdg-user-dirs hyprland sway waybar sddm-git wlogout wl-clipboard
	ffmpeg neovim viewnior kitty alacritty foot dunst rofi exa ranger starship
	polkit-gnome nwg-look-bin qt5ct htop btop ffmpegthumbs papirus-icon-theme catppuccin-gtk-theme-mocha
	zsh exa ripgrep lazygit fd thunar vim bat neofetch cmatrix imagemagick pywal
	ttf-nerd-fonts-symbols-common otf-firamono-nerd inter-font otf-sora ttf-fantasque-nerd noto-fonts noto-fonts-emoji ttf-comfortaa
	ttf-jetbrains-mono ttf-jetbrains-mono-nerd ttf-terminus-nerd ttf-inconsolata ttf-joypixels)

is_installed() {
	pacman -Qi "$1" &>/dev/null
	return $?
}

printf "%s%sChecking for required packages...%s\n" "${BLD}" "${CBL}" "${CNC}"
for pkgs in "${dependencias[@]}"; do
	if ! is_installed "$pkgs"; then
		paru -S "$pkgs" --noconfirm
		printf "\n"
	else
		printf '%s%s is already installed on your system!%s\n' "${CGR}" "$pkgs" "${CNC}"
	fi
done

########## ---------- Preparing Folders ---------- ##########

logo "Preparing Folders"
if [ ! -e ~/.config/user-dirs.dirs ]; then
	xdg-user-dirs-update
	echo "Creating xdg-user-dirs"
else
	echo "user-dirs.dirs already exists"
fi

logo "FZF."
if [ -d "$fzfdir" ]; then
	printf "Updating FZF\n"
	cd $fzfdir || exit
	git pull
	cd || exit
else
	printf "Cloning FZF from %s\n" "$fzfepo"
	cd || exit
	git clone "$fzfepo" "$fzfdir"
	chmod +x "$fzfdir/install"
	$fzfdir/install
fi
sleep 1
clear

logo "Neovim."
if [ -d "$neodir" ]; then
	printf "Updating Neovim\n"
	cd $neodir || exit
	git pull
	read -n1 -rep "Would you like to rebuild Neovim? (y,n)" NEOREBUILD
	if [[ $NEOREBUILD =~ ^[Yy]$ ]]; then
		make CMAKE_BUILD_TYPE=RelWithDebInfo
		sudo make install
		cd || exit
	else
		cd || exit
	fi
else
	printf "Cloning Neovim from %s\n" "$neorepo"
	cd || exit
	git clone "$neorepo" "$neodir"
	cd $neodir || exit
	make CMAKE_BUILD_TYPE=RelWithDebInfo
	sudo make install
	cd || exit
fi
sleep 1
clear

logo "Config files."
if [ -d $dotdir ]; then
	printf "Updating dotfiles.\n"
	cd $dotdir || exit
	git pull
	cd || exit
else
	printf "Cloning dotfiles from %s\n" "$dotrepo"
	cd || exit
	git clone "$dotrepo" "$dotdir"
	cd || exit
fi
sleep 1
clear

### Copy Config Files ###
logo "DO75 Distribution."
read -n1 -rep "Symlink dotfiles? (y,n)" CFG
if [[ $CFG =~ ^[Yy]$ ]]; then
	[ ! -d ~/.config ] && mkdir -p ~/.config
	[ ! -d ~/.scripts ] && mkdir -p ~/.scripts
	[ ! -d ~/.local/bin ] && mkdir -p ~/.local/bin
	[ ! -d ~/.local/share/applications ] && mkdir -p ~/.local/share/applications
	[ ! -d ~/.local/share/fonts ] && mkdir -p ~/.local/share/fonts

	clear
	logo "Deleting symlinks.\n"

	# rm -rfv "$HOME/.config/alacritty"
	# rm -rfv "$HOME/.config/bat"
	# rm -rfv "$HOME/.config/btop"
	# rm -rfv "$HOME/.config/dunst"
	# rm -rfv "$HOME/.config/htop"
	# rm -rfv "$HOME/.config/hypr"
	# rm -rfv "$HOME/.config/kitty"
	# rm -rfv "$HOME/.config/lazygit"
	# rm -rfv "$HOME/.config/nvim"
	# rm -rfv "$HOME/.config/paru"
	# rm -rfv "$HOME/.config/ranger"
	# rm -rfv "$HOME/.config/rofi"
	# rm -rfv "$HOME/.config/starship"
	# rm -rfv "$HOME/.config/sway"
	# rm -rfv "$HOME/.config/swaylock"
	# rm -rfv "$HOME/.config/waybar"
	# rm -rfv "$HOME/.config/wlogout"
	# rm -rfv "$HOME/.config/zsh"
	# rm -rfv "$HOME/.nanorc"
	# rm -rfv "$HOME/.scripts"
	# rm -rfv "$HOME/.vimrc"
	# rm -rfv "$HOME/.xresources"
	rm -rfv "$HOME/.zprofile"
	# rm -rfv "$HOME/.zshenv"
	rm -rfv "$HOME/.zshrc"

	sudo chmod +x ~/dotfiles/scripts/do75
	sudo chmod +x ~/dotfiles/scripts/generatecolorscheme.sh
	sudo chmod +x ~/dotfiles/scripts/setwallpaper.sh
	sudo chmod +x ~/dotfiles/config/hypr/xdg-portal-hyprland
	sudo chmod +x ~/dotfiles/config/waybar/scripts/waybar-wttr.py
	sudo chmod +x ~/dotfiles/config/ranger/scope.sh

	ln -fsv "$dotdir/config/alacritty" "$HOME/.config/alacritty"
	ln -fsv "$dotdir/config/bat" "$HOME/.config/bat"
	ln -fsv "$dotdir/config/dunst" "$HOME/.config/dunst"
	ln -fsv "$dotdir/config/htop" "$HOME/.config/htop"
	ln -fsv "$dotdir/config/hypr" "$HOME/.config/hypr"
	ln -fsv "$dotdir/config/kitty" "$HOME/.config/kitty"
	ln -fsv "$dotdir/config/lazygit" "$HOME/.config/lazygit"
	ln -fsv "$dotdir/config/nvim" "$HOME/.config/nvim"
	ln -fsv "$dotdir/config/paru" "$HOME/.config/paru"
	ln -fsv "$dotdir/config/ranger" "$HOME/.config/ranger"
	ln -fsv "$dotdir/config/rofi" "$HOME/.config/rofi"
	ln -fsv "$dotdir/config/starship" "$HOME/.config/starship"
	ln -fsv "$dotdir/config/sway" "$HOME/.config/sway"
	ln -fsv "$dotdir/config/swaylock" "$HOME/.config/swaylock"
	ln -fsv "$dotdir/config/waybar" "$HOME/.config/waybar"
	ln -fsv "$dotdir/config/wlogout" "$HOME/.config/wlogout"
	ln -fsv "$dotdir/config/zsh" "$HOME/.config/zsh"
	ln -fsv "$dotdir/home/.gitconfig" "$HOME/.gitconfig"
	ln -fsv "$dotdir/home/.nanorc" "$HOME/.nanorc"
	ln -fsv "$dotdir/home/.vimrc" "$HOME/.vimrc"
	ln -fsv "$dotdir/home/.zshenv" "$HOME/.zshenv"
	ln -fsv "$dotdir/scripts" "$HOME/.scripts"

fi
sleep 1
clear

logo "Autologin..."
### Enable SDDM Autologin ###
read -n1 -rep 'Would you like to enable SDDM autologin? (y,n)' SDDM
if [[ $SDDM == "Y" || $SDDM == "y" ]]; then
	LOC="/etc/sddm.conf"
	echo -e "The following has been added to $LOC.\n"
	echo -e "[Autologin]\nUser = $(whoami)\nSession=hyprland" | sudo tee -a $LOC
	echo -e "\n"
	echo -e "Enabling SDDM service...\n"
	sudo systemctl enable sddm
	sleep 3
fi
sleep 1
clear

logo "Changing default shell to zsh"
printf "%s%sIf your shell is not zsh will be changed now.\nYour root password is needed to make the change.\n\nAfter that is important for you to reboot.\n %s\n" "${BLD}" "${CYE}" "${CNC}"
if [[ $SHELL != "/usr/bin/zsh" ]]; then
	echo "Changing shell to zsh, your root pass is needed."
	chsh -s /usr/bin/zsh
else
	printf "%s%sYour shell is already zsh\nGood bye! installation finished, now reboot%s\n" "${BLD}" "${CGR}" "${CNC}"
	clear
	logo " Did I break it? "
fi

# vim:ft=sh:nowrap
