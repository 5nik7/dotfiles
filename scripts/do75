#!/bin/bash

CRE=$(tput setaf 1)
CYE=$(tput setaf 3)
CGR=$(tput setaf 2)
CBL=$(tput setaf 4)
BLD=$(tput bold)
CNC=$(tput sgr0)
LOG="install.log"

source_folder=~/sources
fzf_folder=~/.fzf
fzf_repo=https://github.com/junegunn/fzf
neo_folder=~/sources/neovim
neo_repo=https://github.com/neovim/neovim
dotdir=~/dotfiles
dotrepo=https://github.com/5nik7/dotfiles.git
backup_folder=~/.Backups
date=$(date +%Y%m%d-%H%M%S)
batcache=~/.cache/bat
cachedir=~/.cache
cnfg=~/.config

clear
logo () {

	local text="${1:?}"
	echo -en "\n
    ██████████      ███████    ██████████ ██████████
   ░░███░░░░███   ███░░░░░███ ░███░░░░███░███░░░░░░█
    ░███   ░░███ ███     ░░███░░░    ███ ░███     ░
    ░███    ░███░███      ░███      ███  ░█████████
    ░███    ░███░███      ░███     ███   ░░░░░░░░███
    ░███    ███ ░░███     ███     ███     ███   ░███
    ██████████   ░░░███████░     ███     ░░████████
   ░░░░░░░░░░      ░░░░░░░      ░░░       ░░░░░░░░\n\n"
    printf ' %s [%s%s %s%s %s]%s\n\n' "${CRE}" "${CNC}" "${CYE}" "${text}" "${CNC}" "${CRE}" "${CNC}"
}

########## ---------- You must not run this as root ---------- ##########

if [ "$(id -u)" = 0 ]; then
    echo "This script MUST NOT be run as root user."
    exit 1
fi

if [ ! -d "$source_folder" ]; then
  mkdir -p "$source_folder" || exit
fi

if ! command -v paru >/dev/null 2>&1; then
  read -n1 -rep "Would you like to install Paru? (y/n)" PARUINST
  if [[ $PARUINST =~ ^[Yy]$ ]]; then
    pacman -S --needed git base-devel
	  cd "$source_folder" || exit
	  git clone https://aur.archlinux.org/paru-bin.git
	  cd paru-bin || exit
	  makepkg -si --noconfirm 2>&1 | tee -a $LOG
	  cd || exit
  else
	  printf "%s%sParu is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
    sleep 1
  fi
fi
sleep 2
clear

logo "Yay check..."
# Check if yay is installed
ISyay=/sbin/yay

if [ -f "$ISyay" ]; then
    printf "\n%sYay was located, moving on.%s\n" "$CGR" "$CNC"
else
    printf "\n%s yay was NOT located%s\n" "$CYE" "$CNC"
    read -n1 -rep "Would you like to install yay (y,n)" YAYINST
    if [[ $YAYINST =~ ^[Yy]$ ]]; then
        pacman -S --needed git base-devel
        cd "$source_folder" || exit
        git clone https://aur.archlinux.org/yay.git
        cd yay || exit
        makepkg -si --noconfirm 2>&1 | tee -a $LOG
        cd || exit
    else
        printf "%s yay is required for this script, now exiting.%s\n" "$CRE" "$CNC"
        exit
    fi
# update system before proceed
    printf '%s System Update to avoid issue.%s\n' "${CYE}" "${CNC}"
    yay -Syu --noconfirm 2>&1 | tee -a $LOG
fi

# Function to print error messages
print_error() {
    printf " %s%s%s\n" "$CRE" "$1" "$NC" >&2 "$CNC"
}

# Function to print success messages
print_success() {
    printf "%s%s%s%s\n" "$CGR" "$1" "$NC" "$CNC"
}
sleep 2
clear

### Install packages ####
logo "Package Installation"

while true; do
	read -n1 -rep "Would you like to install the packages? (y,n)" yn
		case $yn in
			[Yy]* ) break;;
			[Nn]* ) exit;;
			* ) printf " Error: just write 'y' or 'n'\n\n";;
		esac
  done
clear

logo "Installing Packages..."

dependencias=(git base-devel base-devel cmake unzip ninja curl pacman-contrib rustup nodejs npm luarocks go python-pip \
              xdg-user-dirs hyprland sway waybar-hyprland-git sddm-git wlogout wl-clipboard \
			        ffmpeg neovim viewnior kitty alacritty foot dunst rofi exa ranger starship \
			        polkit-gnome nwg-look-bin qt5ct htop ffmpegthumbs papirus-icon-theme catppuccin-gtk-theme-mocha \
			        zsh exa ripgrep lazygit fd thunar vim bat pywal \
			        ttf-nerd-fonts-symbols-common otf-firamono-nerd inter-font otf-sora ttf-fantasque-nerd noto-fonts noto-fonts-emoji ttf-comfortaa \
			        ttf-jetbrains-mono ttf-jetbrains-mono-nerd ttf-terminus-nerd ttf-inconsolata ttf-joypixels)

is_installed() {
  pacman -Qi "$1" &> /dev/null
  return $?
}

printf "%s%sChecking for required packages...%s\n" "${BLD}" "${CBL}" "${CNC}"
for pkgs in "${dependencias[@]}"
do
  if ! is_installed "$pkgs"; then
    paru -S "$pkgs" --noconfirm
    printf "\n"
  else
    printf '%s%s is already installed on your system!%s\n' "${CGR}" "$pkgs" "${CNC}"
  fi
done

########## ---------- Preparing Folders ---------- ##########

logo "Preparing Folders"
if [ ! -e $HOME/.config/user-dirs.dirs ]; then
	xdg-user-dirs-update
	echo "Creating xdg-user-dirs"
else
	echo "user-dirs.dirs already exists"
fi
sleep 2
clear

logo "FZF."
  if [ -d "$fzf_folder" ]; then
    printf "Updating FZF\n"
    cd $fzf_folder || exit
    git pull
    cd || exit
  else
    printf "Cloning FZF from %s\n" "$fzf_repo"
    cd || exit
    git clone "$fzf_repo" "$fzf_folder"
    chmod +x "$fzf_folder/install"
    $fzf_folder/install
fi
sleep 2
clear

logo "Neovim."
  if [ -d "$neo_folder" ]; then
    printf "Updating Neovim\n"
    cd $neo_folder || exit
    git pull
    clear
    read -n1 -rep "Would you like to rebuild Neovim? (y,n)" NEOREBUILD
      if [[ $NEOREBUILD =~ ^[Yy]$ ]]; then
        make CMAKE_BUILD_TYPE=RelWithDebInfo
        sudo make install
        cd || exit
      else
        cd || exit
      fi
  else
    printf "Cloning Neovim from %s\n" "$neo_repo"
    cd || exit
    git clone "$neo_repo" "$neo_folder"
    cd $neo_folder || exit
    make CMAKE_BUILD_TYPE=RelWithDebInfo
    sudo make install
    cd || exit
  fi
sleep 2
clear

logo "Config files."
  if [ -d $dotdir ]; then
    printf "Updating dotfiles.\n"
    cd $dotdir || exit
    git pull
    cd || exit
  else
    printf "Cloning dotfiles from %s\n" "$dotrepo"
    cd || exit
    git clone "$dotrepo" "$dotdir"
    cd || exit
  fi
sleep 2
clear

logo "Backup files"
printf "Backup files will be stored in %s%s%s/.Backups%s \n\n" "${BLD}" "${CYE}" "$HOME" "${CNC}"
sleep 5

if [ ! -d "$backup_folder" ]; then
  mkdir -p "$backup_folder"
fi



[ -f ~/.zshrc ] && rm -rfv ~/.zshrc
[ -f ~/.fzf.zsh ] && rm -rfv ~/.fzf.zsh

[ -f ~/.zshenv ] && mv ~/.zshenv $backup_folder/.zshenv-backup-"$(date +%Y.%m.%d-%H.%M.%S)"

printf "%s%sDone!!%s\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 5
clear

### Copy Config Files ###
logo "Do75 Distribution."
read -n1 -rep "Would you like to copy config files? (y,n)" CFG
if [[ $CFG =~ ^[Yy]$ ]]; then
    [ ! -d ~/.config ] && mkdir -p ~/.config
    [ ! -d ~/.local/bin ] && mkdir -p ~/.local/bin
    [ ! -d ~/.local/share/applications ] && mkdir -p ~/.local/share/applications
    [ ! -d ~/.local/share/fonts ] && mkdir -p ~/.local/share/fonts

    printf " Copying config files...\n"

    cdir=(kitty nvim ranger zsh paru bat starship bat dunst hypr rofi swaylock waybar wlogout)

    for folder in "${cdir[@]}"; do
      if [ -d "$cnfg/$folder" ]; then
        mv "$cnfg/$folder" "$backup_folder/${folder}_$date"
        echo "%s backed up successfully at %s/%s_%s" "$folder" "$backup_folder" "${folder}" "$date"
      else
        echo "The folder %s does not exist in %s" "$folder" "$cnfg"
        cp -rv "$dotdir/$folder" "$cnfg/" 2>&1 | tee -a $LOG
      fi
    done
    sleep 3
    clear

    logo "Bins and Scripts."

    if [ ! -d "$cachedir" ]; then
      mkdir -pv "$cachedir"
    fi

    if [ ! -d "$batcache" ]; then
      cp -rv $dotdir/cache/bat $cachedir 2>&1 | tee -a $LOG
    fi

    if [ ! -d "$HOME/.local/bin" ]; then
      mkdir -pv "$HOME/.local/bin"
    fi

    if [ ! -d "$HOME/.cargo/bin" ]; then
      mkdir -pv "$HOME/.cargo/bin"
    fi

    if [ ! -d "$HOME/node_modules/.bin" ]; then
      mkdir -pv "$HOME/node_modules/.bin"
    fi

    if [ ! -d "$HOME/.local/share/gem/ruby/3.0.0/bin" ]; then
      mkdir -pv "$HOME/.local/share/gem/ruby/3.0.0/bin"
    fi

    if [ ! -d "$HOME/go/bin" ]; then
      mkdir -pv "$HOME/go/bin"
    fi


    # Set some files as exacutable
    files="$HOME/.local/bin/"
    for file in "${files[@]}"; do
        chmod +x "$file"
    done

    chmod +x "$cnfg"/ranger/scope.sh
    chmod +x "$cnfg"/hypr/xdg-portal-hyprland
    chmod +x "$cnfg"/waybar/scripts/waybar-wttr.py
fi
sleep 1
clear


logo "Autologin..."
### Enable SDDM Autologin ###
read -n1 -rep 'Would you like to enable SDDM autologin? (y,n)' SDDM
if [[ $SDDM == "Y" || $SDDM == "y" ]]; then
    LOC="/etc/sddm.conf"
    echo -e "The following has been added to $LOC.\n"
    echo -e "[Autologin]\nUser = $(whoami)\nSession=hyprland" | sudo tee -a $LOC
    echo -e "\n"
    echo -e "Enabling SDDM service...\n"
    sudo systemctl enable sddm
    sleep 3
fi
sleep 1
clear

########## --------- Changing shell to zsh ---------- ##########

logo "Changing default shell to zsh"
printf "%s%sIf your shell is not zsh will be changed now.\nYour root password is needed to make the change.\n\nAfter that is important for you to reboot.\n %s\n" "${BLD}" "${CYE}" "${CNC}"
if [[ $SHELL != "/usr/bin/zsh" ]]; then
  echo "Changing shell to zsh, your root pass is needed."
  [ -f ~/.zshrc ] && rm -rfv ~/.zshrc
  [ -f ~/.fzf.zsh ] && rm -rfv ~/.fzf.zsh
  chsh -s /usr/bin/zsh
else
  printf "%s%sYour shell is already zsh\nGood bye! installation finished, now reboot%s\n" "${BLD}" "${CGR}" "${CNC}"
  zsh
fi
clear
logo "Process Completed."