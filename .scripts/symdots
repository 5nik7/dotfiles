#!/bin/bash

CRE=$(tput setaf 1)
CYE=$(tput setaf 3)
CGR=$(tput setaf 2)
CBL=$(tput setaf 4)
BLD=$(tput bold)
CNC=$(tput sgr0)

DOTFILES="$(pwd)"

clear
logo() {

	local text="${1:?}"
	echo -en "\n
    ██████████      ███████    ██████████ ██████████
   ░░███░░░░███   ███░░░░░███ ░███░░░░███░███░░░░░░█
    ░███   ░░███ ███     ░░███░░░    ███ ░███     ░
    ░███    ░███░███      ░███      ███  ░█████████
    ░███    ░███░███      ░███     ███   ░░░░░░░░███
    ░███    ███ ░░███     ███     ███     ███   ░███
    ██████████   ░░░███████░     ███     ░░████████
   ░░░░░░░░░░      ░░░░░░░      ░░░       ░░░░░░░░\n\n"
	printf ' %s [%s%s %s%s %s]%s\n\n' "${CRE}" "${CNC}" "${CYE}" "${text}" "${CNC}" "${CRE}" "${CNC}"
}

logo "This is going to work... I think..."

while true; do
	read -n1 -rep "Would you like to break everything? (y,n)" yn
	case $yn in
	[Yy]*) break ;;
	[Nn]*) exit ;;
	*) printf " Error: just write 'y' or 'n'\n\n" ;;
	esac
done

sudo pacman -Syyu --noconfirm

is_installed() {
	pacman -Qi "$1" &>/dev/null
	return $?
}

printf "%s%sChecking for required packages...%s\n" "${BLD}" "${CBL}" "${CNC}"
for pkgs in "${packages[@]}"; do
	if ! is_installed "$pkgs"; then
		paru -S "$pkgs" --noconfirm
		printf "\n"
	else
		printf '%s%s is already installed on your system!%s\n' "${CGR}" "$pkgs" "${CNC}"
	fi
done

has_config() {
	[ -d "$DOTFILES/$1" ]
	return $?
}

for dirs in "$XDG_CONFIG_HOME/${configs[@]}"; do
	if has_config "$dirs" ]; then
		if [ -d "${XDG_CONFIG_HOME:?}/$dirs" ]; then
			rm -rv "${XDG_CONFIG_HOME:?}/$dirs"
		fi
	else

	fi
done

get_linkables() {
	find -H "$DOTFILES" -maxdepth 3 -name '*.symlink'
}

setup_symlinks() {
	title "Creating symlinks"

	for file in $(get_linkables); do
		target="$HOME/.$(basename "$file" '.symlink')"
		if [ -e "$target" ]; then
			info "~${target#$HOME} already exists... Skipping."
		else
			info "Creating symlink for $file"
			ln -s "$file" "$target"
		fi
	done

	echo -e
	info "installing to ~/.config"
	if [ ! -d "$HOME/.config" ]; then
		info "Creating ~/.config"
		mkdir -p "$HOME/.config"
	fi

	config_files=$(find "$DOTFILES/config" -maxdepth 1 2>/dev/null)
	for config in $config_files; do
		target="$HOME/.config/$(basename "$config")"
		if [ -e "$target" ]; then
			info "~${target#$HOME} already exists... Skipping."
		else
			info "Creating symlink for $config"
			ln -s "$config" "$target"
		fi
	done
}

case "$1" in
backup)
	update_system
	;;
link)
	setup_symlinks
	;;
all)
	backup
	setup_symlinks
	;;
*)
	echo -e $"\nUsage: $(basename "$0") {backup|link|all}\n"
	exit 1
	;;
esac

# vim:ft=sh:nowrap
